/*
 * CherryStatistic.java
 *
 * Copyright (C) 2002-2006 Alexei Drummond and Andrew Rambaut
 *
 * This file is part of BEAST.
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership and licensing.
 *
 * BEAST is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 *  BEAST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with BEAST; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 */

package treestat2.statistics;

import beast.base.core.Citation;
import beast.base.evolution.tree.Node;
import beast.base.evolution.tree.Tree;

/**
 * @author Alexei Drummond
 */

@Citation(value="Steel M and McKenzie A (2001) " +
        "'Properties of phylogenetic trees generated by Yule-type speciation models' " +
        "Mathematical Biosciences 170(1):91-112.",
        DOI="10.1016/S0025-5564(00)00061-4")
@SummaryStatisticDescription(
        name="Cherry count",
        description="The number of internal nodes that have only (two) tips as children.",
        category=SummaryStatisticDescription.Category.TREE_SHAPE,
        allowsNonultrametricTrees = true,
        allowsPolytomies = true,
        allowsUnrootedTrees = false)
public class CherryStatistic extends AbstractTreeSummaryStatistic<Integer> {

	@Override
	public Integer[] getSummaryStatistic(Tree tree) {
		int cherryCount = 0;
		for (Node node : tree.getInternalNodes()) {
            if (node.getChildCount() != 2) break;
            boolean allChildrenExternal = true;
			for (Node child : node.getChildren()) {
				if (!child.isLeaf()) {
					allChildrenExternal = false;
                }
			}
			if (allChildrenExternal) cherryCount += 1;
		}
		return new Integer[] { cherryCount };
	}
}